(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{75:function(e,t,o){"use strict";o.r(t);var v=o(0),_=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h4",{attrs:{id:"git的三个区-四个状态"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git的三个区-四个状态","aria-hidden":"true"}},[e._v("#")]),e._v(" git的三个区, 四个状态")]),o("ul",[o("li",[e._v("三个区\n工作区 暂存区 版本库")]),o("li",[e._v("四个状态\n未修改"),o("code",[e._v("unmodified")]),e._v(", 修改"),o("code",[e._v("modified")]),e._v(",  暂存"),o("code",[e._v("staged")]),e._v(",  未加入git"),o("code",[e._v("untracked")])])]),o("h4",{attrs:{id:"git撤销暂存区与工作区"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git撤销暂存区与工作区","aria-hidden":"true"}},[e._v("#")]),e._v(" git撤销暂存区与工作区")]),o("ul",[o("li",[e._v("撤销工作区\n"),o("code",[e._v("git checkout <file>")])]),o("li",[e._v("撤销暂存区\n"),o("code",[e._v("git reset <file>")])])]),o("h4",{attrs:{id:"git已经commit-但是发现有些东西没改-怎么撤销最近一次的commit-修改后重新commit"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git已经commit-但是发现有些东西没改-怎么撤销最近一次的commit-修改后重新commit","aria-hidden":"true"}},[e._v("#")]),e._v(" git已经commit, 但是发现有些东西没改, 怎么撤销最近一次的commit,修改后重新commit")]),o("ul",[o("li",[o("code",[e._v("reset")]),o("strong",[e._v("慎用")]),o("ol",[o("li",[o("code",[e._v("git reset --soft HEAD^1")]),o("code",[e._v("--soft")]),e._v("表示仅仅是"),o("code",[e._v("HEAD")]),e._v("指向上个版本, 但是\n缓存区跟工作区不会有任何变化")]),o("li",[e._v("再次修改")]),o("li",[o("code",[e._v("git add")]),e._v(" 注意"),o("code",[e._v("-A")]),e._v(","),o("code",[e._v(".")]),e._v(","),o("code",[e._v("-u")]),e._v("参数的区别")]),o("li",[o("code",[e._v("git commit -c ORIG_HEAD")]),e._v(" 此时可以修改上一次的commit信息")])])]),o("li",[o("code",[e._v("git commit --amend")]),o("ol",[o("li",[e._v("做一些修改并提交到暂存区")]),o("li",[o("code",[e._v("git commit --amend")]),e._v("  此时可以修改上一次的提交信息, 最终只会产生一个提交")])])])]),o("h4",{attrs:{id:"push的时候不希望产生很零碎的commit信息"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#push的时候不希望产生很零碎的commit信息","aria-hidden":"true"}},[e._v("#")]),e._v(" push的时候不希望产生很零碎的commit信息")]),o("p",[o("em",[e._v("假设现在在dev分支")])]),o("ol",[o("li",[o("code",[e._v("git checkout -b <temp>")]),e._v("  首先切出一个新的分支, 在新的分支操作")]),o("li",[e._v("做几次修改, 做几次提交")]),o("li",[o("code",[e._v("git checkout dev")]),e._v(" 切回原来的分支")]),o("li",[o("code",[e._v("git merge --squash temp")]),o("code",[e._v("--squash")]),e._v("参数表示挤压的意思,\n它会将"),o("code",[e._v("temp")]),e._v("这个分支的所有 commit 都放进"),o("code",[e._v("dev")]),e._v("的暂存区中,\n此时"),o("code",[e._v("dev")]),e._v("分支就可以进行"),o("code",[e._v("commit")]),e._v(", 只会产生一次 commit 信息")])]),o("h4",{attrs:{id:"很多时候代码被改的乱七八糟-就需要回到之前的版本-检查一下之前版本的代码-然后再回来"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#很多时候代码被改的乱七八糟-就需要回到之前的版本-检查一下之前版本的代码-然后再回来","aria-hidden":"true"}},[e._v("#")]),e._v(" 很多时候代码被改的乱七八糟, 就需要回到之前的版本, 检查一下之前版本的代码, 然后再回来")]),o("ol",[o("li",[o("code",[e._v("git checkout <之前的版本号>")]),e._v(" 这个命令会让"),o("code",[e._v("HEAD")]),e._v("脱离")]),o("li",[e._v("这种情况下, 如果想提交修改, 可以创建出新的一个分支来实现:")]),o("li",[o("code",[e._v("git checkout -b <branch name>")])]),o("li",[e._v("此时, 如果想回到之前未"),o("code",[e._v("checkout")]),e._v("版本号时的"),o("code",[e._v("HEAD")]),e._v("版本, 只需要检出之前所在的分支:\n"),o("code",[e._v("git checkout <previous branch name>")])])]),o("h4",{attrs:{id:"冲突的解决"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#冲突的解决","aria-hidden":"true"}},[e._v("#")]),e._v(" 冲突的解决")]),o("ul",[o("li",[o("p",[o("code",[e._v("git merge")]),o("em",[e._v("进入一个场景")])]),o("ol",[o("li",[o("p",[e._v("基于远程分支"),o("code",[e._v("origin")]),e._v(", 创建一个新的分支, 叫做"),o("code",[e._v("mywork")]),o("code",[e._v("git checkout -b mywork <remote>/origin")])])]),o("li",[o("p",[e._v("做一些修改, 产生两次"),o("code",[e._v("commit")])])]),o("li",[o("p",[e._v("但是在此同时, 也有人在"),o("code",[e._v("origin")]),e._v("分支上做了修改并且"),o("code",[e._v("push")]),e._v("了,\n这意味着"),o("code",[e._v("origin")]),e._v("和"),o("code",[e._v("mywork")]),e._v("分支各自前进了, 它们产生了分叉")])]),o("li",[o("p",[e._v("这时候, 可以"),o("code",[e._v("git pull")]),e._v("把"),o("code",[e._v("origin")]),e._v("分支拉下来, 和自己的代码修改合并,\n并解决冲突, 然后提交。这就产生了一次新的"),o("code",[e._v("commit")]),e._v("。上述过程就是"),o("code",[e._v("3 commits")]),o("img",{attrs:{src:"https://blog-1252181333.cos.ap-shanghai.myqcloud.com/blog/3-way-merge.png",alt:""}}),e._v("\n可以看到分支的修改记录, 并且额外产生了一次新的提交\n当然, 如果"),o("code",[e._v("origin")]),e._v("分支没有修改的话, 那就是"),o("code",[e._v("Fast Forward")])])])])]),o("li",[o("p",[o("code",[e._v("git rebase")]),o("em",[e._v("当然, 如果你希望"),o("code",[e._v("mywork")]),e._v("分支的记录看起来像没有经过任何合并一样")])]),o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("    git checkout mywork\n    git rebase origin\n")])]),o("ul",[o("li",[e._v("它会把"),o("code",[e._v("mywork")]),e._v("分支的"),o("code",[e._v("commit")]),e._v("都取消掉, 并且临时保存为"),o("code",[e._v("patch")]),e._v(", 放在"),o("code",[e._v(".git/rebase")]),e._v("目录中,然后把"),o("code",[e._v("mywork")]),e._v("分支更新到与"),o("code",[e._v("origin")]),e._v("同步, 最后把这些"),o("code",[e._v("patch")]),e._v("应用到"),o("code",[e._v("mywork")]),e._v("分支上.")]),o("li",[e._v("当然如果有冲突的话, 解决冲突后, "),o("code",[e._v("git add .")]),e._v(", "),o("code",[e._v("git rebase --continue")]),e._v("就可以继续了.")]),o("li",[e._v("当"),o("code",[e._v("mywork")]),e._v("分支更新后, 它就会指向新的"),o("code",[e._v("commit")]),e._v(", 而那些老的会被丢弃, "),o("code",[e._v("git gc")]),e._v("就可以删除这些丢弃的"),o("code",[e._v("commit")])]),o("li",[o("code",[e._v("pick")]),e._v(", "),o("code",[e._v("squash")]),e._v(", "),o("code",[e._v("edit")]),e._v("这些参数的用法就不多阐述了")]),o("li",[e._v("你可以随时用"),o("code",[e._v("git rebase --abort")]),e._v("来终止"),o("code",[e._v("rebase")]),e._v("操作, 并且"),o("code",[e._v("mywork")]),e._v("分支会回到"),o("code",[e._v("rebase")]),e._v("开始前的状态")])]),o("p",[o("strong",[o("code",[e._v("rebase")]),e._v("处理之后, 整个是一个链式的记录, 不会像"),o("code",[e._v("merge")]),e._v("那样出现分叉")])])])]),o("hr"),o("p",[o("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("pro git 中文")]),o("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[e._v("pro git en")])])])}],!1,null,null,null);t.default=_.exports}}]);