(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{87:function(v,_,e){"use strict";e.r(_);var t=e(3),o=Object(t.a)({},function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h4",{attrs:{id:"git的三个区-四个状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的三个区-四个状态","aria-hidden":"true"}},[v._v("#")]),v._v(" git的三个区, 四个状态")]),v._v(" "),e("ul",[e("li",[v._v("三个区\n工作区 暂存区 版本库")]),v._v(" "),e("li",[v._v("四个状态\n未修改"),e("code",[v._v("unmodified")]),v._v(", 修改"),e("code",[v._v("modified")]),v._v(",  暂存"),e("code",[v._v("staged")]),v._v(",  未加入git"),e("code",[v._v("untracked")])])]),v._v(" "),e("h4",{attrs:{id:"git撤销暂存区与工作区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git撤销暂存区与工作区","aria-hidden":"true"}},[v._v("#")]),v._v(" git撤销暂存区与工作区")]),v._v(" "),e("ul",[e("li",[v._v("撤销工作区\n"),e("code",[v._v("git checkout <file>")])]),v._v(" "),e("li",[v._v("撤销暂存区\n"),e("code",[v._v("git reset <file>")])])]),v._v(" "),e("h4",{attrs:{id:"git已经commit-但是发现有些东西没改-怎么撤销最近一次的commit-修改后重新commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git已经commit-但是发现有些东西没改-怎么撤销最近一次的commit-修改后重新commit","aria-hidden":"true"}},[v._v("#")]),v._v(" git已经commit, 但是发现有些东西没改, 怎么撤销最近一次的commit,修改后重新commit")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("reset")]),v._v(" "),e("strong",[v._v("慎用")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("git reset --soft HEAD^1")]),v._v(" "),e("code",[v._v("--soft")]),v._v("表示仅仅是"),e("code",[v._v("HEAD")]),v._v("指向上个版本, 但是\n缓存区跟工作区不会有任何变化")]),v._v(" "),e("li",[v._v("再次修改")]),v._v(" "),e("li",[e("code",[v._v("git add")]),v._v(" 注意"),e("code",[v._v("-A")]),v._v(","),e("code",[v._v(".")]),v._v(","),e("code",[v._v("-u")]),v._v("参数的区别")]),v._v(" "),e("li",[e("code",[v._v("git commit -c ORIG_HEAD")]),v._v(" 此时可以修改上一次的commit信息")])])]),v._v(" "),e("li",[e("code",[v._v("git commit --amend")]),v._v(" "),e("ol",[e("li",[v._v("做一些修改并提交到暂存区")]),v._v(" "),e("li",[e("code",[v._v("git commit --amend")]),v._v("  此时可以修改上一次的提交信息, 最终只会产生一个提交")])])])]),v._v(" "),e("h4",{attrs:{id:"push的时候不希望产生很零碎的commit信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push的时候不希望产生很零碎的commit信息","aria-hidden":"true"}},[v._v("#")]),v._v(" push的时候不希望产生很零碎的commit信息")]),v._v(" "),e("p",[e("em",[v._v("假设现在在dev分支")])]),v._v(" "),e("ol",[e("li",[e("code",[v._v("git checkout -b <temp>")]),v._v("  首先切出一个新的分支, 在新的分支操作")]),v._v(" "),e("li",[v._v("做几次修改, 做几次提交")]),v._v(" "),e("li",[e("code",[v._v("git checkout dev")]),v._v(" 切回原来的分支")]),v._v(" "),e("li",[e("code",[v._v("git merge --squash temp")]),v._v(" "),e("code",[v._v("--squash")]),v._v("参数表示挤压的意思,\n它会将"),e("code",[v._v("temp")]),v._v("这个分支的所有 commit 都放进"),e("code",[v._v("dev")]),v._v("的暂存区中,\n此时"),e("code",[v._v("dev")]),v._v("分支就可以进行"),e("code",[v._v("commit")]),v._v(", 只会产生一次 commit 信息")])]),v._v(" "),e("h4",{attrs:{id:"很多时候代码被改的乱七八糟-就需要回到之前的版本-检查一下之前版本的代码-然后再回来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#很多时候代码被改的乱七八糟-就需要回到之前的版本-检查一下之前版本的代码-然后再回来","aria-hidden":"true"}},[v._v("#")]),v._v(" 很多时候代码被改的乱七八糟, 就需要回到之前的版本, 检查一下之前版本的代码, 然后再回来")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("git checkout <之前的版本号>")]),v._v(" 这个命令会让"),e("code",[v._v("HEAD")]),v._v("脱离")]),v._v(" "),e("li",[v._v("这种情况下, 如果想提交修改, 可以创建出新的一个分支来实现:")]),v._v(" "),e("li",[e("code",[v._v("git checkout -b <branch name>")])]),v._v(" "),e("li",[v._v("此时, 如果想回到之前未"),e("code",[v._v("checkout")]),v._v("版本号时的"),e("code",[v._v("HEAD")]),v._v("版本, 只需要检出之前所在的分支:\n"),e("code",[v._v("git checkout <previous branch name>")])])]),v._v(" "),e("h4",{attrs:{id:"冲突的解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#冲突的解决","aria-hidden":"true"}},[v._v("#")]),v._v(" 冲突的解决")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("git merge")]),v._v(" "),e("em",[v._v("进入一个场景")])]),v._v(" "),e("ol",[e("li",[e("p",[v._v("基于远程分支"),e("code",[v._v("origin")]),v._v(", 创建一个新的分支, 叫做"),e("code",[v._v("mywork")]),v._v(" "),e("code",[v._v("git checkout -b mywork <remote>/origin")])])]),v._v(" "),e("li",[e("p",[v._v("做一些修改, 产生两次"),e("code",[v._v("commit")])])]),v._v(" "),e("li",[e("p",[v._v("但是在此同时, 也有人在"),e("code",[v._v("origin")]),v._v("分支上做了修改并且"),e("code",[v._v("push")]),v._v("了,\n这意味着"),e("code",[v._v("origin")]),v._v("和"),e("code",[v._v("mywork")]),v._v("分支各自前进了, 它们产生了分叉")])]),v._v(" "),e("li",[e("p",[v._v("这时候, 可以"),e("code",[v._v("git pull")]),v._v("把"),e("code",[v._v("origin")]),v._v("分支拉下来, 和自己的代码修改合并,\n并解决冲突, 然后提交。这就产生了一次新的"),e("code",[v._v("commit")]),v._v("。上述过程就是"),e("code",[v._v("3 commits")]),v._v(" "),e("img",{attrs:{src:"https://blog-1252181333.cos.ap-shanghai.myqcloud.com/blog/3-way-merge.png",alt:""}}),v._v("\n可以看到分支的修改记录, 并且额外产生了一次新的提交\n当然, 如果"),e("code",[v._v("origin")]),v._v("分支没有修改的话, 那就是"),e("code",[v._v("Fast Forward")])])])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("git rebase")]),v._v(" "),e("em",[v._v("当然, 如果你希望"),e("code",[v._v("mywork")]),v._v("分支的记录看起来像没有经过任何合并一样")])]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("    git checkout mywork\n    git rebase origin\n")])])]),e("ul",[e("li",[v._v("它会把"),e("code",[v._v("mywork")]),v._v("分支的"),e("code",[v._v("commit")]),v._v("都取消掉, 并且临时保存为"),e("code",[v._v("patch")]),v._v(", 放在"),e("code",[v._v(".git/rebase")]),v._v("目录中,然后把"),e("code",[v._v("mywork")]),v._v("分支更新到与"),e("code",[v._v("origin")]),v._v("同步, 最后把这些"),e("code",[v._v("patch")]),v._v("应用到"),e("code",[v._v("mywork")]),v._v("分支上.")]),v._v(" "),e("li",[v._v("当然如果有冲突的话, 解决冲突后, "),e("code",[v._v("git add .")]),v._v(", "),e("code",[v._v("git rebase --continue")]),v._v("就可以继续了.")]),v._v(" "),e("li",[v._v("当"),e("code",[v._v("mywork")]),v._v("分支更新后, 它就会指向新的"),e("code",[v._v("commit")]),v._v(", 而那些老的会被丢弃, "),e("code",[v._v("git gc")]),v._v("就可以删除这些丢弃的"),e("code",[v._v("commit")])]),v._v(" "),e("li",[e("code",[v._v("pick")]),v._v(", "),e("code",[v._v("squash")]),v._v(", "),e("code",[v._v("edit")]),v._v("这些参数的用法就不多阐述了")]),v._v(" "),e("li",[v._v("你可以随时用"),e("code",[v._v("git rebase --abort")]),v._v("来终止"),e("code",[v._v("rebase")]),v._v("操作, 并且"),e("code",[v._v("mywork")]),v._v("分支会回到"),e("code",[v._v("rebase")]),v._v("开始前的状态")])]),v._v(" "),e("p",[e("strong",[e("code",[v._v("rebase")]),v._v("处理之后, 整个是一个链式的记录, 不会像"),e("code",[v._v("merge")]),v._v("那样出现分叉")])])])]),v._v(" "),e("hr"),v._v(" "),e("p",[e("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[v._v("pro git 中文"),e("OutboundLink")],1),v._v(" "),e("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[v._v("pro git en"),e("OutboundLink")],1)])])},[],!1,null,null,null);o.options.__file="git-usage.md";_.default=o.exports}}]);