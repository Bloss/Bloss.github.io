(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{65:function(t,s,n){"use strict";n.r(s);var a=n(0),o=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"js参数都是按值传递的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js参数都是按值传递的","aria-hidden":"true"}},[t._v("#")]),t._v(" JS参数都是按值传递的")]),n("p",[t._v("在高程中是这样描述的：")]),n("blockquote",[n("p",[t._v("ECMAScript中所有函数的参数都是按值传递的")])]),n("p",[t._v("我们怎么理解这句话呢？\n")]),n("h2",{attrs:{id:"几个例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#几个例子","aria-hidden":"true"}},[t._v("#")]),t._v(" 几个例子")]),n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    k "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    o"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n")])]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    o "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//2")]),t._v("\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n")])]),n("ol",[n("li",[n("p",[t._v("我们先看第一个例子，很好理解，按值传递，当 "),n("code",[t._v("i")]),t._v(" 被传进 test 方法，相当于拷贝了一份 i ，\n设这个值为 "),n("code",[t._v("_i")]),t._v(" ，我们后续修改的都是 "),n("code",[t._v("_i")]),t._v(" ，而不会影响原值")])]),n("li",[n("p",[t._v("再看第二个例子，把 "),n("code",[t._v("o")]),t._v(" 传进 test 方法，传递的是地址值（即引用），所以当改变 "),n("code",[t._v("o")]),t._v(" 的\nvalue 的时候，源对象也会被影响，因为两者是引用的同一个地址")])]),n("li",[n("p",[t._v("按照上面的说法，此处修改了 "),n("code",[t._v("o")]),t._v(" 的值，源对象也应该被修改啊，然而源对象并没有变，是哪\n里出错了吗？难道说 js 并不是按值传递吗？")])])]),n("h2",{attrs:{id:"进一步思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进一步思考","aria-hidden":"true"}},[t._v("#")]),t._v(" 进一步思考")]),n("p",[t._v("我们知道， js 数据类型分为两种：值类型和引用类型，值类型存储在栈中，引用类型存储在堆中，\n同时维护一个地址在栈中。而参数传递方式就是指实参传递给形参的一个过程。值传递就是将实参在\n栈中的值传给")]),n("p",[t._v("从这个角度来看三个例子：")]),n("ol",[n("li",[n("p",[t._v("在栈中申请一个地址 "),n("code",[t._v("001")]),t._v(" ，给它一个值 "),n("code",[t._v("1")]),t._v("，将这个值传递到 test 方法，为形参 "),n("code",[t._v("o")]),t._v("在栈\n中申请一个地址 "),n("code",[t._v("002")]),t._v("， 将 "),n("code",[t._v("1")]),t._v("赋给 "),n("code",[t._v("002")]),t._v("，所以修改该值的时候，修改的是 "),n("code",[t._v("002")]),t._v(" 地址的\n值，"),n("code",[t._v("001")]),t._v(" 的值并没有发生改变。所以再次打印，依然是 "),n("code",[t._v("1")])])]),n("li",[n("p",[n("code",[t._v("o")]),t._v(" 是引用类型，所以需要在堆中申请一个地址 "),n("code",[t._v("011")]),t._v("，保存一个对象（属性 value 为 1），\n然后在栈中申请一个地址 "),n("code",[t._v("001")]),t._v(" ，这个地址保存了 "),n("code",[t._v("011")]),t._v(" 这个内存地址值，然后为 test 方法\n的形参 "),n("code",[t._v("o")]),t._v(" 在栈中申请一个地址 "),n("code",[t._v("002")]),t._v(" ，它保存了 "),n("code",[t._v("011")]),t._v(" 这个内存地址值，所以当修改它的值\n的时候，会去找 "),n("code",[t._v("011")]),t._v(" 这个地址的对象。所以再次打印 "),n("code",[t._v("o")]),t._v(" 的时候，它的值已经发生了变化")])]),n("li",[n("p",[n("code",[t._v("o")]),t._v(" 是引用类型，在堆中申请一个地址 "),n("code",[t._v("011")]),t._v(" ，保存一个对象（属性 value 为 1），然后\n在栈中申请一个地址 "),n("code",[t._v("001")]),t._v(" ，这个地址保存了 "),n("code",[t._v("011")]),t._v(" 这个内存地址值，然后 test 方法的形参\n"),n("code",[t._v("o")]),t._v(" 在栈中申请一个地址 "),n("code",[t._v("002")]),t._v("，它保存了 "),n("code",[t._v("011")]),t._v("这个内存地址值，到目前为止跟第二个例子\n都是一样的，接下来不同的地方来了，它给形参 "),n("code",[t._v("o")]),t._v(" 赋值为 "),n("code",[t._v("2")]),t._v("，由于 "),n("code",[t._v("2")]),t._v(" 是 Number 类型，\n所以直接给 "),n("code",[t._v("002")]),t._v(" 这个地址赋值为 "),n("code",[t._v("2")]),t._v("，但是源对象在堆中的值并没有改变，所以第一次打印\n为 "),n("code",[t._v("2")]),t._v("，第二次打印仍然为 "),n("code",[t._v("1")])])])]),n("h2",{attrs:{id:"结论"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结论","aria-hidden":"true"}},[t._v("#")]),t._v(" 结论")]),n("p",[t._v("大家不要纠结于是值传递还是引用传递或者是 call by sharing。只要搞懂上面的几个概念，\n就能清楚了解js参数的传递方式")])])}],!1,null,null,null);s.default=o.exports}}]);